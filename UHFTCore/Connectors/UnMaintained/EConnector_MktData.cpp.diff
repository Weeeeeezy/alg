diff --git a/UHFT/Connectors/EConnector_MktData.cpp b/UHFT/Connectors/EConnector_MktData.cpp
index d1139c8d..228d5d9c 100644
--- a/UHFT/Connectors/EConnector_MktData.cpp
+++ b/UHFT/Connectors/EConnector_MktData.cpp
@@ -44,9 +44,12 @@ namespace MAQUETTE
     EConnector          (false, "", nullptr, nullptr, nullptr, false, false,
                          nullptr,   nullptr, false,   false),
 #   endif
-    m_primaryMDC        (a_primary_mdc),  // If NULL, then WE ARE PRIMARY!
+    // A Primary MDC owns the OrderBooks; for a Secondary one, OrderBooks are
+    // aliased from the corresp Primary:
+    m_primaryMDC        (a_primary_mdc),
     m_orderBooks        (IsPrimaryMDC()
                          ? new OrderBooksVec() : m_primaryMDC->m_orderBooks),
+    m_protoSubscrInfos  (),
     m_mktDepth          (a_mkt_depth),
     m_maxOrderBookLevels(0),              // As yet
     m_isFullAmt         (a_is_full_amt),
@@ -105,7 +108,8 @@ namespace MAQUETTE
     m_nOrders = a_params->get<long>("MaxOrders");
     if (m_nOrders > 0)
     {
-      // Yes, it is enabled: Construct or alias "m_orders":
+      // Yes, it is enabled: Again, "m_orders" is owned by a Primary MDC and
+      // aliased by a Secondary one:
       m_orders =
         IsPrimaryMDC()
         ? new OrderBook::OrderInfo[size_t(m_nOrders)]
@@ -164,13 +168,14 @@ namespace MAQUETTE
     m_nOrders = 0;
     if (m_orders != nullptr)
     {
-      // XXX: BEWARE of deleting an alias!
+      // XXX: BEWARE of deleting an alias -- "m_orders" is owned by a Primary
+      // MDC only:
       if (IsPrimaryMDC())
         delete[] m_orders;
       m_orders  = nullptr;
     }

-    // For a Primary MDC, de-allocate the OrderBooks as well:
+    // For a Primary MDC, de-allocate the (owned) "m_orderBooks" as well:
     if (m_orderBooks != nullptr)
     {
       if (IsPrimaryMDC())
@@ -333,19 +338,23 @@ namespace MAQUETTE

     // Create and install a new empty OrderBook:
     assert(m_orderBooks != nullptr);
-    m_orderBooks->emplace_back
-    (
-      // NB: "OrderBook" Ctor is invoked HERE with the following args:
-      this,
-      &a_instr,
-      m_isFullAmt,
-      m_withFracQtys,
-      m_withSeqNums,
-      m_withRptSeqs,
-      m_strictRptSeqs,
-      m_maxOrderBookLevels,
-      m_mktDepth
-    );
+    auto iter =
+      m_orderBooks->emplace_back
+      (
+        // NB: "OrderBook" Ctor is invoked HERE with the following args:
+        this,
+        &a_instr,
+        m_isFullAmt,
+        m_withFracQtys,
+        m_withSeqNums,
+        m_withRptSeqs,
+        m_strictRptSeqs,
+        m_maxOrderBookLevels,
+        m_mktDepth
+      );
+
+    // In addition, if it is a TCP-based MDC, create a "ProtoSubscrInfo" obj
+    // for this Instrument / OrderBook:
   }

   //=========================================================================//
@@ -532,11 +541,11 @@ namespace MAQUETTE
   //=========================================================================//
   // "InvalidateOrderBooks":                                                 //
   //=========================================================================//
-  // Typically invoked before "Start":
+  // Typically invoked before "Start" and during or after "Stop":
   //
   void EConnector_MktData::InvalidateOrderBooks()
   {
-    // XXX: Only do it for a PRIMARY MDC, otherwise multiple invalidations may
+    // XXX: Only do it for a Primary MDC, otherwise multiple invalidations may
     // happen:
     if (!IsPrimaryMDC())
       return;
@@ -552,6 +561,10 @@ namespace MAQUETTE
       // not invoked here):
       ob.m_isProtoSubscrd = false;
       ob.m_protoSubscrID  = 0;
+
+        LOG_INFO(3,
+          ("EConnector_MktData: Invalidated OrderBook for Instr={}",
+           ob.GetInstr().m_FullName.data())
     }
     // Also, reset the following flds into their initial vals (which will be
     // needed when the OrderBooks are re-initialised);   XXX: DynInitMode is
